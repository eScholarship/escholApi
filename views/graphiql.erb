 <div id="graphiql-container">
      Loading...
    </div>
    <script>
    var parameters = {};
    // Parse the search string to get url parameters.
    var search = window.location.search;
    search.substr(1).split('&').forEach(function (entry) {
     var eq = entry.indexOf('=');
     if (eq >= 0) {
       parameters[decodeURIComponent(entry.slice(0, eq))] =
         decodeURIComponent(entry.slice(eq + 1));
     }
    });
    // if variables was provided, try to format it.
    if (parameters.variables) {
     try {
       parameters.variables =
         JSON.stringify(JSON.parse(parameters.variables), null, 2);
     } catch (e) {
       // Do nothing, we want to display the invalid JSON as a string, rather
       // than present an error.
     }
    }
    // When the query and variables string is edited, update the URL bar so
    // that it can be easily shared
    function onEditQuery(newQuery) {
     parameters.query = newQuery;
     updateURL();
    }
    function onEditVariables(newVariables) {
     parameters.variables = newVariables;
     updateURL();
    }
    function updateURL() {
     var newSearch = '?' + Object.keys(parameters).map(function (key) {
       return encodeURIComponent(key) + '=' +
         encodeURIComponent(parameters[key]);
     }).join('&');
     history.replaceState(null, null, newSearch);
    }
    // Defines a GraphQL fetcher using the fetch API.
    function graphQLFetcher(graphQLParams) {
      var csrf = document.getElementsByName('_csrf')[0].content;
      var token = document.getElementsByName('token')[0].content;
      return fetch('/graphql', {
        method: 'post',
        body: JSON.stringify(graphQLParams),
        credentials: 'same-origin',
        headers: {
          X_CSRF_TOKEN: csrf,
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + token
        }
      }).then(function (response) {
        return response.json()
      });
    }
    // Render <GraphiQL /> into the body.
    ReactDOM.render(
      React.createElement(GraphiQL, {
        fetcher: graphQLFetcher,
        defaultQuery: "{}",
        query: parameters.query,
        variables: parameters.variables,
        onEditQuery: onEditQuery,
        onEditVariables: onEditVariables
      }),
      document.getElementById("graphiql-container")
    );
    </script>
